{"version":3,"sources":["Config/firebase/index.js","Containers/pages/Dashboard/index.js","Config/redux/action/index.js","Components/atoms/Button/index.js","Containers/pages/Login/index.js","Containers/pages/Register/index.js","Config/redux/reducer/index.js","Config/redux/store/index.js","Containers/pages/App/index.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","Dashboard","state","title","date","content","textButton","noteId","handleSaveNotes","props","saveNotes","updateNotes","userData","JSON","parse","localStorage","getItem","data","Date","getTime","userId","uid","onInputChange","e","type","setState","target","value","note","console","log","id","cancelUpdate","deleteNote","stopPropagation","deleteNotes","this","getNotes","notes","className","placeholder","onChange","onClick","length","map","ts","Intl","DateTimeFormat","year","month","day","hour","minute","second","format","key","window","confirm","Component","connect","user","dispatch","ref","push","addDataAPI","urlNotes","Promise","resolve","reject","on","snapshot","val","Object","keys","set","err","updatedataFromAPI","remove","deletedataFromAPI","Button","onclick","loading","Login","email","password","handleChangetext","handleLoginSubmit","a","history","loginAPI","catch","res","setItem","stringify","isLoading","href","auth","signInWithEmailAndPassword","then","dataUser","emailVerified","refreshToken","error","errorCode","code","errorMessage","message","loginUserAPI","Register","handleRegisterSubmit","registerAPI","createUserWithEmailAndPassword","registerUserAPI","initState","popup","isLogin","reducer","action","store","createStore","applyMiddleware","thunk","App","path","exact","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4ab374ee.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/database'\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDqIe63Oa2Dnu-r1Gv57s72y-Zvnqn6Z1Y\",\r\n    authDomain: \"learn-reactjs-firebase-d6b68.firebaseapp.com\",\r\n    databaseURL: \"https://learn-reactjs-firebase-d6b68.firebaseio.com\",\r\n    projectId: \"learn-reactjs-firebase-d6b68\",\r\n    storageBucket: \"learn-reactjs-firebase-d6b68.appspot.com\",\r\n    messagingSenderId: \"119435121023\",\r\n    appId: \"1:119435121023:web:f2942ed109a8cce7eaca4a\",\r\n    measurementId: \"G-S442H7DM8R\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\n  // database\r\n  export const database = firebase.database()\r\n  \r\n  export default firebase;","import React, { Component, Fragment } from 'react';\r\nimport './Dashboard.scss'\r\nimport { addDataAPI, getdataFromAPI, updatedataFromAPI, deletedataFromAPI } from '../../../Config/redux/action';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Dashboard extends Component {\r\n    state = {\r\n        title     : '',\r\n        date      : '',\r\n        content   : '',\r\n        textButton: 'Simpan',\r\n        noteId    : ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        const userData = JSON.parse(localStorage.getItem('userData'));\r\n        this.props.getNotes(userData.uid)\r\n    }\r\n    \r\n\r\n    handleSaveNotes = () => {\r\n        const {title, content, textButton, noteId} = this.state;\r\n        const {saveNotes,updateNotes} = this.props\r\n        const userData = JSON.parse(localStorage.getItem('userData'))\r\n        const data = {\r\n            title  : title,\r\n            content: content,\r\n            date   : new Date().getTime(),\r\n            userId : userData.uid\r\n        }\r\n\r\n        if (textButton === 'Simpan'){\r\n            saveNotes(data)\r\n        } else{\r\n            data.noteId = noteId\r\n            updateNotes(data)\r\n        }       \r\n    }\r\n\r\n    onInputChange = (e, type) => {\r\n        this.setState({\r\n            [type] : e.target.value\r\n        })\r\n    }\r\n\r\n    updateNotes = (note) => {\r\n        console.log(note);\r\n        this.setState({\r\n            title     : note.data.title,\r\n            content   : note.data.content,\r\n            textButton: 'Update',\r\n            noteId    : note.id\r\n        })\r\n    }\r\n\r\n    cancelUpdate = () => {\r\n        this.setState({\r\n            title  : '',\r\n            content: '',\r\n            textButton : 'Simpan'\r\n        })\r\n    }\r\n\r\n    deleteNote = (e, note) => {\r\n        e.stopPropagation();\r\n        const {deleteNotes} = this.props;\r\n        const userData = JSON.parse(localStorage.getItem('userData'));\r\n        const data = {\r\n            userId : userData.uid,\r\n            noteId : note.id\r\n        }\r\n        deleteNotes(data);\r\n    }\r\n\r\n    render() {\r\n        const {title, content, textButton} = this.state\r\n        const {notes}                = this.props\r\n        const {updateNotes}          = this\r\n        return (\r\n            <div className = 'App'>\r\n                <div className = 'container'>\r\n                    <div className = 'header'>\r\n                        <p>Masukkan Catatan Anda</p>\r\n                        <input    placeholder = 'title' value = {title} onChange = {(e) => this.onInputChange(e, 'title')} />\r\n                        <textarea placeholder = 'context' value = {content} onChange = {(e) => this.onInputChange(e, 'content')}/>\r\n                        <div className= 'button-action'>\r\n                            {\r\n                                textButton === 'Update' ? (\r\n                                    <button className = 'cancel' onClick = {this.cancelUpdate} >Cancel</button>\r\n                                ) : null\r\n                            }\r\n                            <button onClick = {this.handleSaveNotes}>{textButton}</button>\r\n                        </div>\r\n                    </div>\r\n                        <hr/>\r\n                        {\r\n                            notes.length > 0 ? (\r\n                                <Fragment>\r\n                                    {\r\n                                        notes.map(note => {\r\n                                            const ts = note.data.date;\r\n                                            const Date = new Intl.DateTimeFormat('en-US', {year: 'numeric', month: '2-digit',day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit'}).format(ts);\r\n                                            return(\r\n                                                <div className = 'content' key = {note.id} onClick = {() => updateNotes(note)} >\r\n                                                    <p className = 'body-title'>{note.data.title}</p>\r\n                                                    <p className = 'body-date'>{Date}</p>\r\n                                                    <p className = 'body-content'>{note.data.content}</p>\r\n                                                    <div className= 'delete-btn' onClick={(e) => { if (window.confirm('Apakah kamu yakin menghapus catatan ini?'))\r\n                                                     this.deleteNote(e,note) \r\n                                                     } }>\r\n                                                        Hapus  \r\n                                                    </div>\r\n                                                </div>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </Fragment>\r\n                            ) : null \r\n                        }                         \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst reduxState = (state) => ({\r\n    userData: state.user,\r\n    notes   : state.notes\r\n})\r\n\r\nconst reduxDispatch = (dispatch) => ({\r\n    saveNotes  : (data) => dispatch(addDataAPI(data)),\r\n    getNotes   : (data) => dispatch(getdataFromAPI(data)),\r\n    updateNotes: (data) => dispatch(updatedataFromAPI(data)),\r\n    deleteNotes: (data) => dispatch(deletedataFromAPI(data))\r\n})\r\n\r\nexport default connect (reduxState, reduxDispatch) (Dashboard);","import firebase, { database } from '../../firebase';\r\n\r\nexport const actionUsername = () => (dispatch) => {\r\n    setTimeout(() => {\r\n        return dispatch({\r\n            type : 'CHANGE_USER', \r\n            value: 'ReskyBN'\r\n        })\r\n    },2000)\r\n}\r\n\r\nexport const registerUserAPI = (data) => (dispatch) => {\r\n    return new Promise((resolve,reject) => {\r\n        dispatch({type: 'CHANGE_LOADING', value : true})\r\n        firebase.auth().createUserWithEmailAndPassword(data.email, data.password)\r\n        .then( (res) =>{\r\n            console.log(\"success\", res);\r\n            dispatch({type: 'CHANGE_LOADING', value : false})\r\n            resolve(true)\r\n        })\r\n        .catch(function(error) {\r\n            // Handle Errors here.\r\n            var errorCode = error.code;\r\n            var errorMessage = error.message;\r\n            console.log(errorCode, errorMessage);\r\n            dispatch({type: 'CHANGE_LOADING', value : false})\r\n            reject(false)\r\n            // ...\r\n        })\r\n        \r\n    })\r\n}\r\n\r\nexport const loginUserAPI = (data) => (dispatch) => {\r\n    return new Promise((resolve,reject) => {\r\n        dispatch({type: 'CHANGE_LOADING', value : true})\r\n        firebase.auth().signInWithEmailAndPassword(data.email, data.password)\r\n        .then( (res) =>{\r\n            console.log(\"success\", res);\r\n            const dataUser = {\r\n                email        : res.user.email,\r\n                uid          : res.user.uid,\r\n                emailVerified: res.user.emailVerified,\r\n                refreshToken : res.user.refreshToken\r\n            }\r\n            dispatch({type: 'CHANGE_ISLOGIN', value : true})\r\n            dispatch({type: 'CHANGE_LOADING', value : false})\r\n            dispatch({type: 'CHANGE_USER', value : dataUser})\r\n            resolve(dataUser)\r\n        })\r\n        .catch(function(error) {\r\n            // Handle Errors here.\r\n            var errorCode    = error.code;\r\n            var errorMessage = error.message;\r\n            console.log(errorCode, errorMessage);\r\n            dispatch({type: 'CHANGE_ISLOGIN', value : false})\r\n            dispatch({type: 'CHANGE_LOADING', value : false})\r\n            reject(false)\r\n            // ...\r\n        })\r\n    })\r\n}\r\n\r\nexport const addDataAPI = (data) => (dispatch) => {\r\n    database.ref('notes/' + data.userId).push({\r\n        title  : data.title,\r\n        content: data.content,\r\n        date   : data.date\r\n    })\r\n}\r\n\r\nexport const getdataFromAPI = (userId) => (dispatch) => {\r\n    const urlNotes = database.ref('notes/' + userId );\r\n    return new Promise ((resolve,reject) => {\r\n        urlNotes.on('value', function(snapshot){\r\n            console.log('get data',snapshot.val());\r\n            const data = []\r\n            if (snapshot.val() === null){\r\n                return null\r\n            } else{\r\n                Object.keys(snapshot.val()).map(key => {\r\n                    data.push({\r\n                        id  : key,\r\n                        data: snapshot.val()[key]\r\n                    })\r\n                })\r\n    \r\n                dispatch({type : 'SET_NOTES', value : data})\r\n                resolve(snapshot.val())\r\n            }\r\n            \r\n        })\r\n    })\r\n} \r\n\r\nexport const updatedataFromAPI = (data) => (dispatch) => {\r\n    const urlNotes = database.ref(`notes/${data.userId}/${data.noteId}` );\r\n    return new Promise ((resolve,reject) => {\r\n        urlNotes.set({\r\n            title  : data.title,\r\n            content: data.content,\r\n            date   : data.date\r\n        }, (err) => {\r\n            if(err){\r\n                reject(false);\r\n            } else{\r\n                resolve(true)\r\n            }\r\n        })\r\n    })\r\n\r\n} \r\n\r\nexport const deletedataFromAPI = (data) => (dispatch) => {\r\n    const urlNotes = database.ref(`notes/${data.userId}/${data.noteId}` );\r\n    return new Promise ((resolve,reject) => {\r\n        urlNotes.remove()\r\n    })\r\n} ","import React from 'react'\r\n\r\nconst Button = ({title,onclick, loading}) => {\r\n    if (loading) {\r\n        return(\r\n            <button \r\n                className = 'btn disable'\r\n                onClick   = {onclick}\r\n            >\r\n                Loading....\r\n            </button>\r\n        )\r\n    }\r\n    return(\r\n        <button \r\n            className = 'btn'\r\n            onClick   = {onclick}\r\n        >\r\n            {title}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Button;","import React, { Component } from 'react';\r\nimport './Login.scss'\r\nimport { connect } from 'react-redux';\r\nimport { loginUserAPI } from '../../../Config/redux/action';\r\nimport Button from '../../../Components/atoms/Button';\r\n\r\nclass Login extends Component {\r\n    state = {\r\n        email    : '',\r\n        password : ''\r\n    }\r\n\r\n    handleChangetext = (e) => {\r\n        this.setState({\r\n            [e.target.id]   : e.target.value\r\n        })\r\n    }\r\n\r\n    handleLoginSubmit = async () => {\r\n        const {email, password} = this.state;\r\n        const {history} = this.props;\r\n        const res = await this.props.loginAPI({email, password}).catch(err => err);\r\n        if (res) {\r\n            console.log('login success', res);\r\n            localStorage.setItem('userData', JSON.stringify(res));\r\n            this.setState({\r\n                email   : '',\r\n                password: ''\r\n            })\r\n            history.push('/dashboard')\r\n        }else{\r\n            console.log('login error');\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className = 'auth-container '>\r\n                <div className=\"auth-card \">\r\n                    <p className = \"auth-title\">Login Page</p>\r\n                    <input\r\n                        value       = {this.state.email}\r\n                        id          = 'email'\r\n                        className   = \"auth-input\"\r\n                        placeholder = 'Email'\r\n                        type        = 'text'\r\n                        onChange    = {this.handleChangetext}\r\n                    />\r\n                    <input \r\n                        value       = {this.state.password}\r\n                        id          = 'password'\r\n                        className   = \"auth-input\"\r\n                        placeholder = 'Password'\r\n                        type        = 'password'\r\n                        onChange    = {this.handleChangetext}\r\n                    />\r\n                    <Button\r\n                        onclick = {this.handleLoginSubmit}\r\n                        title   = \"Login\"\r\n                        loading = {this.props.isLoading}\r\n                    />\r\n                    <div className = 'nav-register'>\r\n                        <p>Belum memiliki akun ? <a href=\"/register\"> Daftar disini!</a> </p>\r\n                    </div>\r\n                </div>\r\n                {/* <button>Register</button>\r\n                <button>Dashboard</button> */}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isLoading : state.isLoading\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    loginAPI : (data) => dispatch (loginUserAPI(data))\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps) (Login);","import React, { Component } from 'react';\r\nimport './Register.scss'\r\nimport Button from '../../../Components/atoms/Button';\r\nimport { connect } from 'react-redux';\r\nimport { registerUserAPI } from '../../../Config/redux/action';\r\n\r\nclass Register extends Component {\r\n    state = {\r\n        email    : '',\r\n        password : ''\r\n    }\r\n\r\n    handleChangetext = (e) => {\r\n        this.setState({\r\n            [e.target.id]   : e.target.value\r\n        })\r\n    }\r\n\r\n    handleRegisterSubmit = async () => {\r\n        const {email, password} = this.state;\r\n        const res = await this.props.registerAPI({email, password}).catch(err => err)\r\n        console.log(res);\r\n        if (res) {\r\n            this.setState({\r\n                email   : '',\r\n                password: ''\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className = 'auth-container '>\r\n                <div className=\"auth-card \">\r\n                    <p className = \"auth-title\">Register Page</p>\r\n                    <input\r\n                        value       = {this.state.email}\r\n                        id          = 'email'\r\n                        className   = \"auth-input\"\r\n                        placeholder = 'Email'\r\n                        type        = 'text'\r\n                        onChange    = {this.handleChangetext}\r\n                    />\r\n                    <input \r\n                        value       = {this.state.password}\r\n                        id          = 'password'\r\n                        className   = \"auth-input\"\r\n                        placeholder = 'Password'\r\n                        type        = 'password'\r\n                        onChange    = {this.handleChangetext}\r\n                    />\r\n                    <Button \r\n                        onclick = {this.handleRegisterSubmit}\r\n                        title   = \"Register\"\r\n                        loading = {this.props.isLoading}\r\n                    />\r\n                </div>\r\n                {/* <button>Register</button>\r\n                <button>Dashboard</button> */}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isLoading : state.isLoading\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    registerAPI : (data) => dispatch (registerUserAPI(data))\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps) (Register);","const initState = {\r\n    popup    : false,\r\n    isLogin  : false,\r\n    isLoading: false,\r\n    user     : {},\r\n    notes    : []\r\n  }\r\n  \r\n  const reducer = (state = initState, action) => {\r\n    if (action.type === 'CHANGE_POPUP'){\r\n          return {\r\n              ...state,\r\n              popup : action.value\r\n          }\r\n    }\r\n  \r\n    if (action.type === 'CHANGE_ISLOGIN') {\r\n          return {\r\n              ...state,\r\n              isLogin : action.value\r\n          }\r\n    }\r\n\r\n    if (action.type === 'CHANGE_USER') {\r\n        return {\r\n            ...state,\r\n            user : action.value\r\n        }\r\n    }\r\n\r\n    if (action.type === 'CHANGE_LOADING') {\r\n        return {\r\n            ...state,\r\n            isLoading : action.value\r\n        }\r\n    }\r\n\r\n    if (action.type === 'SET_NOTES') {\r\n        return {\r\n            ...state,\r\n            notes : action.value\r\n        }\r\n    }\r\n      return state;\r\n  }\r\n\r\n  export default reducer;","import {createStore, applyMiddleware} from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport reducer from '../reducer'\r\n\r\nexport const store = createStore(reducer, applyMiddleware(thunk))\r\n\r\n","import React from 'react';\nimport './App.css';\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\nimport Dashboard from '../Dashboard';\nimport Login from '../Login';\nimport Register from '../Register';\nimport {Provider} from 'react-redux'\nimport {store} from '../../../Config/redux'\n\nfunction App() {\n  return (\n    <Provider store = {store} >\n      <Router>\n        <Route path='/' exact component={Login}/>\n        <Route path='/dashboard' exact component={Dashboard}/>\n        <Route path='/register' component={Register}/>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/pages/App';\nimport * as serviceWorker from './serviceWorker';\nimport firebase from './Config/firebase'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nconsole.log('config firebase :',firebase);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}